package net.shoreline.client.impl.module.exploit;

import net.shoreline.client.OvaqReborn;
import net.minecraft.item.EnderPearlItem;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.math.Vec3d;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.RotationModule;
import net.shoreline.client.init.Managers;
import net.shoreline.client.util.player.RotationUtil;
import net.shoreline.client.util.string.EnumFormatter;

/**
 * @author linus
 * @since 1.0
 */
public class PearlPhaseModule extends RotationModule {
    //
    Config<PhaseMode> modeConfig = new EnumConfig<>("Mode", "The phase mode for clipping into blocks", PhaseMode.PEARL, PhaseMode.values());
    Config<Integer> pitchConfig = new NumberConfig<>("Pitch", "The pitch to throw pearls", 70, 85, 90, () -> modeConfig.getValue() == PhaseMode.PEARL);
    Config<Float> blocksConfig = new NumberConfig<>("Blocks", "The blocks distance to phase clip", 0.001f, 0.003f, 10.0f, () -> modeConfig.getValue() != PhaseMode.PEARL);
    Config<Boolean> autoClipConfig = new BooleanConfig("AutoClip", "Automatically clips into the block", true);
    /**
     *
     */
    public PearlPhaseModule() {
        super("PearlPhase", "Allows player to phase through solid blocks", ModuleCategory.EXPLOIT, 1000);
    }

    @Override
    public String getModuleData() {
        return EnumFormatter.formatEnum(modeConfig.getValue());
    }

    @Override
    public void onEnable() {
        if (mc.player == null) {
            return;
        }
        if (modeConfig.getValue() == PhaseMode.PEARL) {
            int pearlSlot = -1;
            for (int i = 0; i < 9; i++) {
                ItemStack stack = mc.player.getInventory().getStack(i);
                if (stack.getItem() instanceof EnderPearlItem) {
                    pearlSlot = i;
                    break;
                }
            }
            if (pearlSlot == -1 || mc.player.getItemCooldownManager().isCoolingDown(Items.ENDER_PEARL)) {
                disable();
                return;
            }
            float prevYaw = mc.player.getYaw();
            float prevPitch = mc.player.getPitch();
            float[] rotations = RotationUtil.getRotationsTo(mc.player.getEyePos(),
                    new Vec3d(Math.floor(mc.player.getX()) + 0.5, 0.0, Math.floor(mc.player.getZ()) + 0.5));
            setRotationClient(rotations[0] + 180.0f, pitchConfig.getValue());
             mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(rotations[0] + 180.0f, pitchConfig.getValue(), mc.player.isOnGround()));
            Managers.INVENTORY.setSlot(pearlSlot);
            Managers.NETWORK.sendPacket(new PlayerMoveC2SPacket.Full(mc.player.getX(), mc.player.getY(), mc.player.getZ(), rotations[0] + 180.0f, pitchConfig.getValue(), mc.player.isOnGround()));
            Managers.NETWORK.sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id));
            mc.player.swingHand(Hand.MAIN_HAND);
            Managers.INVENTORY.syncToClient();
            setRotationClient(prevYaw, prevPitch);
            disable();
        } else if (autoClipConfig.getValue()) {
            double cos = Math.cos(Math.toRadians(mc.player.getYaw() + 90.0f));
            double sin = Math.sin(Math.toRadians(mc.player.getYaw() + 90.0f));
            mc.player.setPosition(mc.player.getX() + (1.0 * blocksConfig.getValue() * cos + 0.0 * blocksConfig.getValue() * sin),
                    mc.player.getY(), mc.player.getZ() + (1.0 * blocksConfig.getValue() * sin - 0.0 * blocksConfig.getValue() * cos));
        }
    }


    public enum PhaseMode {
        PEARL
    }
}
